Useful Docker Commands


---->docker build

Build an image from a Dockerfile.

docker build [DOCKERFILE PATH]

Example:
---->Build an image tagged my-org/my-image where the Dockerfile 
can be found at /tmp/Dockerfile.

docker build -t my-org:my-image -f /tmp/Dockerfile



---->Useful flags

--file -f Path where to find the Dockerfile.
--force-rm Always remove intermediate containers.
--no-cache Do not use cache when building the image.
--rm Remove intermediate containers after a successful build (this is true) by default.
--tag -t Name and optionally a tag in the ‘name:tag’ format.

*****************************************
List of all the basic Docker commands:
*****************************************
docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry
docker stack ls                                            # List stacks or apps
docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager




*****************************************

Docker - How to cleanup (unused) resources
*****************************************
Once in a while, you may need to cleanup resources 
(containers, volumes, images, networks) ...
----->Delete volumes

// see: https://github.com/chadoe/docker-cleanup-volumes

$ docker volume rm $(docker volume ls -qf dangling=true)
$ docker volume ls -qf dangling=true | xargs -r docker volume rm


----->Delete Networks

docker network ls  
$ docker network ls | grep "bridge"   
$ docker network rm $(docker network ls | grep "bridge" | awk '/ / { print $1 }')

----->Delete Docker Images 

// see: http://stackoverflow.com/questions/32723111/how-to-remove-old-and-unused-docker-images

$ docker images
$ docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

$ docker images | grep "none"
$ docker rmi $(docker images | grep "none" | awk '/ / { print $3 }')

----->Delete Docker Containers
 
// see: http://stackoverflow.com/questions/32723111/how-to-remove-old-and-unused-docker-images

$ docker ps
$ docker ps -a
$ docker rm $(docker ps -qa --no-trunc --filter "status=exited")

----->Resize disk space for docker vm

docker-machine create --driver virtualbox --virtualbox-disk-size "40000" default



**********************************
---->Remove all images
**********************************
All the Docker images on a system can be listed by adding -a to the docker images command. Once you're sure you want to delete them all, you can add the -q flag to pass the Image ID to docker rmi:

-->List:

docker images -a

-->Remove:

docker rmi $(docker images -a -q)
docker rmi -f $(docker images -a -q)


**********************************
---->Stop and remove all containers
**********************************

You can review the containers on your system with docker ps. Adding the -a flag will show all containers. When you're sure you want to delete them, you can add the -q flag to supply the IDs to the docker stop and docker rm commands:
List:

docker ps -a

Remove:

docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker rm -f $(docker ps -aq)


**********************************
Clear any cached networks:
**********************************
docker network prune



**********************************
you can create volume explicitly using the:
**********************************
docker volume create


---->you can remove unused volume using:

docker volume prune

---->To we the approximate size of a running container, you can use the:

docker ps -s

**********************************
List the contents of the local storage area:
**********************************

 sudo ls /var/lib/docker/containers

**********************************
check out their sizes:

 sudo du -sh /var/lib/docker/containers/*


**********************************
Create a volume:
**********************************

 docker volume create my-vol

---->List volumes:

 docker volume ls


---->Inspect a volume:

 docker volume inspect my-vol
 output:[
    {
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/my-vol/_data",
        "Name": "my-vol",
        "Options": {},
        "Scope": "local"
    }
]

---->Remove a volume:

 docker volume rm my-vol



---->Display Docker version and info

docker --version
docker version
docker info


---->Execute Docker image

docker run hello-world

---->List Docker images

docker image ls

---->List Docker containers (running, all, all in quiet mode)

docker container ls
docker container ls --all
docker container ls -aq





